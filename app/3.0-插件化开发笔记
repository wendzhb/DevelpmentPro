1.简介
Xutils的源码，ButterKnife的源码 ，自己动手打造了一套IOC注解框架。
任务：Xutils源码下载下来，进行修改加入网络检测的扩展功能。

QQ群  546270670

2.插件开发工具的安装
https://www.jetbrains.com/idea/ 下载路径   可以在分享的云盘里面下载

plugin.xml：
id ： 插件的Id
name: 插件的名称
version: 插件的版本
actions：执行的动作，执行的一个操作

3.Action简介
在光标位置弹出一个窗口  显示HelloWorld 显示几秒
groups : 代表显示的菜单地方
Anchor: 代表显示的位置  first last

4.蒙B问题
个人觉得学一个东西 考虑成本。开发过程中使用别人写好就可以了。
个人觉得只要会改别人写好的差价，或者懂一些基本的就可以，视频目前国内网站都是没有的HelloWorld,如果有些人在研究插件开发可以给一些建议。

5.IOC注解生成器
    5.1： 获取光标所在行的layout文件名

    /**     * 获取当前光标的layout文件     */
    private String getCurrentLayout(Editor editor) {
        Document document = editor.getDocument();
        CaretModel caretModel = editor.getCaretModel();
        int caretOffset = caretModel.getOffset();
        int lineNum = document.getLineNumber(caretOffset);
        int lineStartOffset = document.getLineStartOffset(lineNum);
        int lineEndOffset = document.getLineEndOffset(lineNum);
        String lineContent = document.getText(new TextRange(lineStartOffset, lineEndOffset));
        String layoutMatching = "R.layout.";
        if (!TextUtils.isEmpty(lineContent) && lineContent.contains(layoutMatching)) {
            // 获取layout文件的字符串
            int startPosition = lineContent.indexOf(layoutMatching) + layoutMatching.length();
            int endPosition = lineContent.indexOf(")", startPosition);
            String layoutStr = lineContent.substring(startPosition, endPosition);
            // 可能是另外一种情况 View.inflate
            if (layoutStr.contains(",")) {
                endPosition = lineContent.indexOf(",", startPosition);
                layoutStr = lineContent.substring(startPosition, endPosition);
            }
            return layoutStr;
        }
        return null;
    }

    5.2： 获取整个工程的layout文件，然后找到id去遍历

    /**     * 获取所有id     *     * @param file     * @param elements     * @return     */
    public static java.util.List<Element> getIDsFromLayout(final PsiFile file, final java.util.List<Element> elements) {
        // To iterate over the elements in a file
        // 遍历一个文件的所有元素
        file.accept(new XmlRecursiveElementVisitor() {
            @Override
            public void visitElement(PsiElement element) {
                super.visitElement(element);
                // 解析Xml标签
                if (element instanceof XmlTag) {
                    XmlTag tag = (XmlTag) element;
                    // 获取Tag的名字（TextView）或者自定义
                    String name = tag.getName();
                    // 如果有include
                    if (name.equalsIgnoreCase("include")) {
                        // 获取布局
                        XmlAttribute layout = tag.getAttribute("layout", null);
                        // 获取project
                        Project project = file.getProject();
                        // 布局文件
                        XmlFile include = null;
                        PsiFile[] psiFiles = FilenameIndex.getFilesByName(project, getLayoutName(layout.getValue()) + ".xml", GlobalSearchScope.allScope(project));
                        if (psiFiles.length > 0) {
                            include = (XmlFile) psiFiles[0];
                        }
                        if (include != null) {
                            // 递归
                            getIDsFromLayout(include, elements);
                            return;
                        }
                    }
                    // 获取id字段属性
                    XmlAttribute id = tag.getAttribute("android:id", null);
                    if (id == null) {
                        return;
                    }
                    // 获取id的值
                    String idValue = id.getValue();
                    if (idValue == null) {
                        return;
                    }
                    XmlAttribute aClass = tag.getAttribute("class", null);
                    if (aClass != null) {
                        name = aClass.getValue();
                    }
                    // 添加到list
                    try {
                        Element e = new Element(name, idValue,  tag);
                        elements.add(e);
                    } catch (IllegalArgumentException e) {
                    }
                }
            }
        });
        return elements;
    }

    5.3： 生成Dialog供用户选择id生成
    /**     * 解析mElements，并添加到JPanel     */
    private void initContentPanel() {
        mContentJPanel.removeAll();
        // 设置内容
        for (int i = 0; i < mElements.size(); i++) {
            Element mElement = mElements.get(i);
            IdBean itemJPanel = new IdBean(new GridLayout(1, 4, 10, 10),
            new EmptyBorder(5, 10, 5, 10),
            new JCheckBox(mElement.getName()),
            new JLabel(mElement.getId()),
            new JCheckBox(),
            new JTextField(mElement.getFieldName()),
            mElement);
            // 监听
            itemJPanel.setEnableActionListener(this);
            itemJPanel.setClickActionListener(clickCheckBox -> mElement.setIsCreateClickMethod(clickCheckBox.isSelected()));
            itemJPanel.setFieldFocusListener(fieldJTextField -> mElement.setFieldName(fieldJTextField.getText()));
            mContentJPanel.add(itemJPanel);
            mContentConstraints.fill = GridBagConstraints.HORIZONTAL;
            mContentConstraints.gridwidth = 0;
            mContentConstraints.gridx = 0;
            mContentConstraints.gridy = i;
            mContentConstraints.weightx = 1;
            mContentLayout.setConstraints(itemJPanel, mContentConstraints);
        }
        mContentJPanel.setLayout(mContentLayout);
        jScrollPane = new JBScrollPane(mContentJPanel);
        jScrollPane.revalidate();
        // 添加到JFrame
        getContentPane().add(jScrollPane, 1);
    }

    5.4： 生成IOC注解代码代码
    /**     * 创建变量     */
    private void generateFields() {
        for (Element element : mElements) {
            if (mClass.getText().contains("@ViewById(" + element.getFullID() + ")")) {
                // 不创建新的变量
                continue;
            }
            // 设置变量名，获取text里面的内容
            String text = element.getXml().getAttributeValue("android:text");
            if (TextUtils.isEmpty(text)) {
                // 如果是text为空，则获取hint里面的内容
                text = element.getXml().getAttributeValue("android:hint");
            }
            // 如果是@string/app_name类似
            if (!TextUtils.isEmpty(text) && text.contains("@string/")) {
                text = text.replace("@string/", "");
                // 获取strings.xml
                PsiFile[] psiFiles = FilenameIndex.getFilesByName(mProject, "strings.xml", GlobalSearchScope.allScope(mProject));
                if (psiFiles.length > 0) {
                    for (PsiFile psiFile : psiFiles) {
                        // 获取src\main\res\values下面的strings.xml文件
                        String dirName = psiFile.getParent().toString();
                        if (dirName.contains("src\\main\\res\\values")) {
                            text = Util.getTextFromStringsXml(psiFile, text);
                        }
                    }
                }
            }
            StringBuilder fromText = new StringBuilder();
            if (!TextUtils.isEmpty(text)) {
                fromText.append("/****" + text + "****/\n");
            }
            fromText.append("@ViewById(" + element.getFullID() + ")\n");
            fromText.append("private ");
            fromText.append(element.getName());
            fromText.append(" ");
            fromText.append(element.getFieldName());
            fromText.append(";");
            // 创建点击方法
            if (element.isCreateFiled()) {
                // 添加到class
                mClass.add(mFactory.createFieldFromText(fromText.toString(), mClass));
            }
        }
    }

    /**     * 创建OnClick方法     */
    private void generateOnClickMethod() {
        for (Element element : mElements) {
            // 可以使用并且可以点击
            if (element.isCreateClickMethod()) {
                // 需要创建OnClick方法
                String methodName = getClickMethodName(element) + "Click";
                PsiMethod[] onClickMethods = mClass.findMethodsByName(methodName, true);
                boolean clickMethodExist = onClickMethods.length > 0;
                if (!clickMethodExist) {
                    // 创建点击方法
                    createClickMethod(methodName, element);
                }
            }
        }
    }

    Android 开发 核心  ， 做一个引导

    任务：
    Xutils源码下载下来，进行修改加入网络检测的扩展功能。
    BaseActivity   周日  异步AsyncTask的源码
    热修复  下周末   看一下热修复的文章   了解类的加载机制的源码  下载    Ali   腾讯




