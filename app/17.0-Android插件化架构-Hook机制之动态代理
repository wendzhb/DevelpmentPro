1.插件化架构简介（3次）
    1.插件化架构：主apk+从apk（服务器） 30M    15M     启动没有安装的apk(解决问题)
    2.为了更新，为了用户体验

    插件化： 动态代理 activity启动流程 资源和类的加载 360开源插件化框架
    插件化实现： DL开源框架，

    自己的实现思路，需要加载插件里面的activity，是不会在AndroidManifest.xml里面配置的，那么就肯定会报错，还要加载类，
    加载插件的资源等等

    解决怎么样让没有在AndroidManifest.xml里面没有配置的activity也能启动

    思路：
    1.需要知道activity的启动流程，知道为什么报错
    2.想办法绕过去

2.代理模式使用场景
    1.MVP架构
        静态代理、动态代理都要用 p绑定v,p解绑v  每个方面都需要判断v还在不在动态代理
    2.DL插件化架构
        activity的生命周期都是由代理的activity调用，静态代理
    3.数据库懒加载
        就要使用静态代理，用到了才去加载
    4.xutils的源码也用到了
        setOnClickListener setOnTouchListener等等都是动态代理设计模式

3.静态代理
    重点：实例代码，现在去银行办理业务，业务员（代理），速度，流程发生变化，好处
    不好的地方：每个方法其实类似，代码量会增多


4.动态代理

5.JDK动态代理源码分析
    1.到底干了什么，怎么实现的
    2.学习一下源码怎么写的，9段 4-5段
    3.不懂得代码没必要深究，发现偏了方向从新来