1.完善数据库
     //查询部分进行修改，单独创建一个支持类
     // 查询所有
        List<Person> person1 = daoSupport.querySupport().queryAll();

     //根据条件进行查询
        List<Person> person2 = daoSupport.querySupport()
                .selection("age = ?").selectionArgs("23").query();

2.整合网络引擎和数据库
    原因：
    1.访问网络的时候，网络不好时会有延迟的，一半的网络访问缓存是按照时间去计算的，比如在规定的时间内就会只拿缓存，超过
      规定的时间才会向后台发起请求，因为内涵段子项目的特殊性，要确保获取到的数据是及时的，所以不采用第三方的自带
      缓存机制。
    2.自己的缓存逻辑，每次都会去请求数据，但是为了保证用户体验，我们会先去本地拿缓存，如果本地有则显示，然后获取到后台返回
      数据后，如果数据一样则不作界面刷新，如果不一样刷新界面，加入缓存

    两个地方处理缓存：缓存在数据库的是一个键值对，key唯一 只能是url+参数，value是后台返回的jsonString
        1.回调里面
            callback:单一职责问题，callback只用来回调，数据缓存不是通用设置，大部分直接使用第三方的缓存机制就行

        2.引擎里面

3.架构第一阶段总结
    反射：第三方源码，以及Google的源码很多反射，阿里热修复，自己实现的热修复，Google view创建，activity创建
    设计模式：工厂，builder设计模式，模板设计模式
    泛型
    搭建框架的原因：1.为了方便
                  2.开发的速度
                  activity -->baseactivity
                  网络-->引擎和数据库
                  findviewbyid-->注解以及as插件
                  头部-->nagigationbar
                  adapter
4.以后的安排